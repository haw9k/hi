# Шифр Цезаря
alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
shift = 3
text = input("Введите текст для шифрования: ")
encrypted = ""

for char in text:
    if char.lower() in alphabet:
        index = alphabet.index(char.lower())
        new_index = (index + shift) % len(alphabet)
        if char.isupper():
            encrypted += alphabet[new_index].upper()
        else:
            encrypted += alphabet[new_index]
    else:
        encrypted += char

print("Зашифрованный текст:", encrypted)
decrypted = ""
for char in encrypted:
    if char.lower() in alphabet:
        index = alphabet.index(char.lower())
        new_index = (index - shift) % len(alphabet)
        if char.isupper():
            decrypted += alphabet[new_index].upper()
        else:
            decrypted += alphabet[new_index]
    else:
        decrypted += char

print("Расшифрованный текст:", decrypted)
# Шифр Маскура
import random

alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'

# таблица замен
half = len(alphabet) // 2
first_half = list(alphabet[:half])  # первая половина: а-п
second_half = list(alphabet[half:])  # вторая половина: р-я

# перемешиваем обе половины
random.shuffle(first_half)
random.shuffle(second_half)

encrypt_dict = {}
decrypt_dict = {}

for i in range(half):
    encrypt_dict[alphabet[i]] = first_half[i]  # а→д
    encrypt_dict[alphabet[half + i]] = second_half[i]  # р→у

    decrypt_dict[first_half[i]] = alphabet[i]  # д→а
    decrypt_dict[second_half[i]] = alphabet[half + i]  # у→р


text = input("Введите текст для шифрования: ")
encrypted = ""

for char in text:
    if char.lower() in alphabet:
        if char.isupper():
            encrypted += encrypt_dict[char.lower()].upper()
        else:
            encrypted += encrypt_dict[char.lower()]
    else:
        encrypted += char

print("Зашифрованный текст:", encrypted)


decrypted = ""
for char in encrypted:
    if char.lower() in alphabet:
        if char.isupper():
            decrypted += decrypt_dict[char.lower()].upper()
        else:
            decrypted += decrypt_dict[char.lower()]
    else:
        decrypted += char

print("Расшифрованный текст:", decrypted)
# Шифр Атбаш
alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'

text = input("Введите текст: ")

encrypted = ""
for char in text:
    if char.lower() in alphabet:
        index = alphabet.index(char.lower())
        new_index = len(alphabet) - 1 - index
        if char.isupper():
            encrypted += alphabet[new_index].upper()
        else:
            encrypted += alphabet[new_index]
    else:
        encrypted += char

print("Зашифрованный текст:", encrypted)

decrypted = ""
for char in encrypted:
    if char.lower() in alphabet:
        index = alphabet.index(char.lower())
        new_index = len(alphabet) - 1 - index
        if char.isupper():
            decrypted += alphabet[new_index].upper()
        else:
            decrypted += alphabet[new_index]
    else:
        decrypted += char

print("Расшифрованный текст:", decrypted)


Вот модифицированный код с выводом ключей:

```python
# Шифр Маскура
import random

alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'

# таблица замен
half = len(alphabet) // 2
first_half = list(alphabet[:half])  # первая половина: а-п
second_half = list(alphabet[half:])  # вторая половина: р-я

# перемешиваем обе половины
random.shuffle(first_half)
random.shuffle(second_half)

encrypt_dict = {}
decrypt_dict = {}

for i in range(half):
    encrypt_dict[alphabet[i]] = first_half[i]  # а→д
    encrypt_dict[alphabet[half + i]] = second_half[i]  # р→у

    decrypt_dict[first_half[i]] = alphabet[i]  # д→а
    decrypt_dict[second_half[i]] = alphabet[half + i]  # у→р

# Вывод таблицы соответствий (ключа)
print("=" * 50)
print("ТАБЛИЦА СООТВЕТСТВИЙ (КЛЮЧ):")
print("=" * 50)
print("Исходная → Зашифрованная")
print("-" * 30)

# Выводим соответствия для первой половины
for i in range(half):
    print(f"{alphabet[i]:<2} → {first_half[i]:<2}")

# Выводим соответствия для второй половины  
for i in range(half):
    print(f"{alphabet[half + i]:<2} → {second_half[i]:<2}")

print("=" * 50)
print()

text = input("Введите текст для шифрования: ")
encrypted = ""

for char in text:
    if char.lower() in alphabet:
        if char.isupper():
            encrypted += encrypt_dict[char.lower()].upper()
        else:
            encrypted += encrypt_dict[char.lower()]
    else:
        encrypted += char

print("Зашифрованный текст:", encrypted)

decrypted = ""
for char in encrypted:
    if char.lower() in alphabet:
        if char.isupper():
            decrypted += decrypt_dict[char.lower()].upper()
        else:
            decrypted += decrypt_dict[char.lower()]
    else:
        decrypted += char

print("Расшифрованный текст:", decrypted)

# Дополнительный вывод для удобства чтения ключа
print("\n" + "=" * 50)
print("КОМПАКТНЫЙ ВИД КЛЮЧА:")
print("=" * 50)
print("Исходный алфавит:    " + " ".join(alphabet))
print("Зашифрованный:       " + " ".join([encrypt_dict[char] for char in alphabet]))
print("=" * 50)
```

Что добавлено:

1. Детальная таблица соответствий - показывает каждую пару "исходная буква → зашифрованная буква"
2. Компактный вид ключа - показывает обе строки алфавита для удобного сравнения
3. Визуальное оформление - разделители для лучшей читаемости

Пример вывода:

```
==================================================
ТАБЛИЦА СООТВЕТСТВИЙ (КЛЮЧ):
==================================================
Исходная → Зашифрованная
------------------------------
а  → ж 
б  → м 
в  → а 
г  → о 
д  → е 
е  → д 
ё  → б 
ж  → в 
з  → и 
и  → ё 
й  → н 
к  → г 
л  → л 
м  → к 
н  → п 
о  → з 
п  → й 
р  → ь 
с  → ф 
т  → х 
у  → ц 
ф  → э 
х  → щ 
ц  → ш 
ч  → ч 
ш  → ю 
щ  → у 
ъ  → т 
ы  → с 
ь  → ъ 
э  → ы 
ю  → р 
я  → я 
==================================================

КОМПАКТНЫЙ ВИД КЛЮЧА:
==================================================
Исходный алфавит:    а б в г д е ё ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я
Зашифрованный:       ж м а о е д б в и ё н г л к п з й ь ф х ц э щ ш ч ю у т с ъ ы р я
==================================================
```

Теперь можно легко видеть, какая буква во что преобразуется!
# Шифр Камасутра
import random

alphabet = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
print(f"Длина алфавита: {len(alphabet)}")

# Делим алфавит пополам
half = len(alphabet) // 2
first_half = list(alphabet[:half])    # первая половина
second_half = list(alphabet[half:])   # вторая половина

# Перемешиваем обе половины
random.shuffle(first_half)
random.shuffle(second_half)

# Создаем словарь для шифрования (буква → пара)
encrypt_dict = {}
for i in range(len(first_half)):
    encrypt_dict[first_half[i]] = second_half[i]
    encrypt_dict[second_half[i]] = first_half[i]

# Вывод ключей (таблицы соответствий)
print("=" * 60)
print("ШИФР КАМАСУТРА - ТАБЛИЦА СООТВЕТСТВИЙ:")
print("=" * 60)
print("Пары букв для замены:")
print("-" * 30)

for i in range(len(first_half)):
    print(f"{first_half[i]} ↔ {second_half[i]}")

print("=" * 60)
print()

# Компактный вид ключа
print("Компактный вид ключа:")
print("Первая половина:  " + " ".join(first_half))
print("Вторая половина:  " + " ".join(second_half))
print("=" * 60)
print()

# Шифрование
text = input("Введите текст для шифрования: ")
encrypted = ""

for char in text:
    if char.lower() in encrypt_dict:
        if char.isupper():
            encrypted += encrypt_dict[char.lower()].upper()
        else:
            encrypted += encrypt_dict[char.lower()]
    else:
        encrypted += char

print("Зашифрованный текст:", encrypted)
print()

# Расшифровка (тот же процесс, так как шифр симметричный)
decrypted = ""
for char in encrypted:
    if char.lower() in encrypt_dict:
        if char.isupper():
            decrypted += encrypt_dict[char.lower()].upper()
        else:
            decrypted += encrypt_dict[char.lower()]
    else:
        decrypted += char

print("Расшифрованный текст:", decrypted)

# Дополнительная информация
print("\n" + "=" * 60)
print("ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ:")
print("=" * 60)
print("Полный словарь замен:")
for i, (key, value) in enumerate(encrypt_dict.items()):
    if i % 5 == 0:
        print()
    print(f"{key}→{value}", end="  ")
print("\n" + "=" * 60)





# GOST
# -*- coding: utf-8 -*-

#  таблица замен (S-блок)
BLOCK = [
    [4, 14, 5, 7, 6, 4, 13, 1],
    [10, 11, 8, 13, 12, 11, 11, 15],
    [9, 4, 1, 10, 7, 10, 4, 13],
    [2, 12, 13, 1, 1, 0, 1, 0],
    [13, 6, 10, 0, 5, 7, 3, 5],
    [8, 13, 3, 8, 15, 2, 15, 7],
    [0, 15, 4, 9, 13, 1, 5, 10],
    [14, 10, 2, 15, 8, 13, 9, 4],
    [6, 2, 14, 14, 4, 3, 0, 9],
    [11, 3, 15, 4, 10, 6, 10, 2],
    [1, 8, 12, 6, 9, 8, 14, 3],
    [12, 1, 7, 12, 14, 5, 7, 14],
    [7, 0, 6, 11, 0, 9, 6, 6],
    [15, 7, 0, 2, 3, 12, 8, 11],
    [5, 5, 9, 5, 11, 15, 2, 8],
    [3, 9, 11, 3, 2, 14, 12, 12],
]


def get_ascii(char):
    """Преобразование символа """
    if char == ' ':
        asci_number = ord(char) - 16
        binary_number = '000' + bin(asci_number)[2:]
    else:
        asci_number = ord(char) - 848
        binary_number = bin(asci_number)[2:]
    return binary_number


def step_one(R0, X):
    """Сложение R0 и X по модулю 2^32"""
    str_R0 = ''.join(R0)
    str_X = ''.join(X)

    int_R0 = int(str_R0, 2)
    int_X = int(str_X, 2)
    int_R0_plus_X = int_R0 + int_X

    # Берем младшие 32 бита (mod 2^32)
    R0X = bin(int_R0_plus_X)[2:].zfill(32)[-32:]

    # Разделяем на 4 байта
    return [R0X[i * 8:(i + 1) * 8] for i in range(4)]


def step_two(R0X):
    """Применение S-блоков )"""
    block_nums = []
    for i in range(len(R0X)):
        left = R0X[i][:4]  # Левые 4 бита
        right = R0X[i][4:]  # Правые 4 бита

      
        block_nums.append(BLOCK[int(left, 2)][7 - i * 2])
        block_nums.append(BLOCK[int(right, 2)][7 - 1 - i * 2])

    return block_nums


def step_three(block_nums):
    
    binary_block = ''
    for num in block_nums:
        binary_block += bin(num)[2:].zfill(4)

   
    binary_block = binary_block[11:] + binary_block[:11]
    print(f'f:  {binary_block}')
    return binary_block


def step_four(binary_block, L0_list):
    """XOR"""
    f = int(binary_block, 2)
    L0 = int(''.join(L0_list), 2)

    R1 = bin(f ^ L0)[2:]
    print(f'R1: {R1}')
    return R1


def first_iter(text):
    L0 = []
    R0 = []
    X = []

    # Разделяем текст на блоки
    for i in range(min(12, len(text))):
        binary_number = get_ascii(text[i])

        if i < 4:
            L0.append(binary_number)
        elif i < 8:
            R0.append(binary_number)
        else:
            X.append(binary_number)

    print(f"L0: {L0}")
    print(f"R0: {R0}")
    print(f"X:  {X}")

    #  шифрование
    R0X = step_one(R0, X)
    print(f"R0+X: {R0X}")

    block_nums = step_two(R0X)
    print(f"После S-блоков: {block_nums}")

    binary_block = step_three(block_nums)
    R1 = step_four(binary_block, L0)

    return R1



def main():
    text = 'Ребров Арсений Михайлович'
    print(f"Исходный текст: '{text}'")
    print("=" * 50)

    result = first_iter(text)
    print("=" * 50)
    print(f"Результат первой итерации: {result}")



if __name__ == "__main__":
    main()
