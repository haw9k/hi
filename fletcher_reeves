import numpy as np
import matplotlib.pyplot as plt

def f(x, y):
    return x ** 2 + 5 * y ** 2 + x * y + x

def gradient(x, y):
    dx = 2 * x + y + 1
    dy = 10 * y + x
    return np.array([dx, dy])

def norm(v):
    return np.linalg.norm(v)

def f_along_direction(x, y, dx, dy, t):
    return f(x + t * dx, y + t * dy)

def golden_section(x, y, dx, dy, a=0, b=0.5, l=0.01, max_iter=1000):
    phi = (3 - np.sqrt(5)) / 2
    t1 = a + phi * (b - a)
    t2 = a + b - t1
    f1 = f_along_direction(x, y, dx, dy, t1)
    f2 = f_along_direction(x, y, dx, dy, t2)

    for _ in range(max_iter):
        if abs(b - a) < l:
            break
        if f1 <= f2:
            b = t2
            t2 = t1
            f2 = f1
            t1 = a + b - t1
            f1 = f_along_direction(x, y, dx, dy, t1)
        else:
            a = t1
            t1 = t2
            f1 = f2
            t2 = a + b - t2
            f2 = f_along_direction(x, y, dx, dy, t2)
    return (a + b) / 2

def fletcher_reeves(x0, y0, e1, e2, M):
    k = 1
    x, y = x0, y0
    count = 0
    grad = gradient(x, y)
    norm_prev = None
    d = -grad
    path = [(x, y)]
    while k <= M:
        grad = gradient(x, y)
        norm_curr = norm(grad)
        if norm_curr < e1:
            break
        if k > 1:
            beta = (norm_curr ** 2) / (norm_prev ** 2)
            d = -grad + beta * d
        else:
            d = -grad
        t = golden_section(x, y, d[0], d[1])
        new_x = x + t * d[0]
        new_y = y + t * d[1]
        path.append((new_x, new_y))
        delta_x = norm([new_x - x, new_y - y])
        delta_f = abs(f(new_x, new_y) - f(x, y))
        if delta_x < e2 and delta_f < e2:
            if count == 1:
                break
            else:
                count += 1
        else:
            count = 0

        x, y = new_x, new_y
        norm_prev = norm_curr
        k += 1
    return {'x': x, 'y': y, 'f(x,y)': f(x, y), 'k': k, 'path': path}

def plot_results(path, f):
    x_vals = np.linspace(-5, 5, 400)
    y_vals = np.linspace(-3, 3, 400)
    X, Y = np.meshgrid(x_vals, y_vals)
    Z = f(X, Y)

    fig = plt.figure(figsize=(14, 6))

    
    ax1 = fig.add_subplot(1, 2, 1, projection='3d')
    ax1.plot_surface(X, Y, Z, cmap='viridis', alpha=0.8)
    ax1.set_title(r'3D График функции: $f(x, y) = x^2 + 5y^2 + xy + x$')
    ax1.set_xlabel('X')
    ax1.set_ylabel('Y')
    ax1.set_zlabel('f(x, y)')

    x_min, y_min = path[-1]
    ax1.scatter(x_min, y_min, f(x_min, y_min), color='red', s=50, label='Минимум')
    ax1.legend()

  
    ax2 = fig.add_subplot(1, 2, 2)
    cs = ax2.contour(X, Y, Z, levels=30, cmap='viridis')
    ax2.clabel(cs, inline=1, fontsize=8)
    ax2.set_title('Контурный график + траектория')
    ax2.set_xlabel('X')
    ax2.set_ylabel('Y')

   
    path = np.array(path)
    ax2.plot(path[:, 0], path[:, 1], 'r-o', label='Траектория итераций')
    ax2.scatter(x_min, y_min, color='red', label='Минимум', zorder=5)
    ax2.legend()
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    x0 = 1
    y0 = 1
    e1 = 0.1
    e2 = 0.15
    M = 10

    result = fletcher_reeves(x0, y0, e1, e2, M)

    print("Результат метода Флетчера-Ривса:")
    for key, value in result.items():
        if key != 'path':
            print(f"{key} = {value}")

    plot_results(result['path'], f)
