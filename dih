import numpy as np
import matplotlib.pyplot as plt


def f(x):
    """Оптимизируемая функция: f(x) = x^2 - 2x + 3"""
    return x ** 2 - 4 * x + 6


def xi(a, b, e):
    """Формула для вычисления новых точек y и z"""
    return (a + b + e) / 2


def dichotomy(a, b, l, e):
    """Метод дихотомии для нахождения минимума функции"""
    k = 0  # Количество итераций

    print("\nИтерации метода дихотомии:")
    print("{:<4} {:<10} {:<10} {:<10} {:<10} {:<10}".format("k", "a", "b", "y", "z", "|b-a|"))

    while abs(b - a) > l:
        y = xi(a, b, -e)
        z = xi(a, b, e)

        print("{:<4} {:<10.6f} {:<10.6f} {:<10.6f} {:<10.6f} {:<10.6f}".format(k, a, b, y, z, abs(b - a)))

        if f(y) <= f(z):
            b = z
        else:
            a = y

        k += 1

    N = 2 * k + 2  # Общее количество вычислений функции
    answer = {
        'x': (a + b) / 2,
        'f(x)': f((a + b) / 2),
        'L': [a, b],
        'k': k,
        'N': N,
        'R': 1 / (2 ** (N / 2))
    }

    print("\n=== Итоговые параметры ===")
    for key, value in answer.items():
        print(f"{key}: {value}")

    return answer


# Входные параметры
a, b = 0, 10
l = 0.5
epsilon = 0.2

# Запуск метода дихотомии
answer = dichotomy(a, b, l, epsilon)

# Визуализация графика функции с найденной точкой минимума
min_x = answer['x']
min_y = f(min_x)

X = np.linspace(-2, 8, 100)
Y = f(X)

plt.plot(X, Y, label='y = x^2 - 4x + 6', color='red')
plt.scatter(min_x, min_y, color='blue', s=100, label=f'Точка минимума ({min_x:.5f}, {min_y:.5f})')

plt.xlabel('x')
plt.ylabel('y')
plt.title('График функции y = x^2 - 4x + 6')

plt.legend()
plt.grid(True)
plt.show()
